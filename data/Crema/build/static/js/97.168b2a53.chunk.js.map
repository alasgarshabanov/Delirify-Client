{"version":3,"sources":["assets/images/userPageImages/ResetPassword.png","modules/userPages/StyledUserPages/ResetPassword.js"],"names":["module","exports","MyTextField","props","useField","field","meta","errorText","error","touched","helperText","validationSchema","yup","oldPassword","required","id","newPassword","confirmPassword","ResetPassword","classes","makeStyles","theme","styledImg","display","breakpoints","up","paddingRight","textField","width","card","maxWidth","textAlign","overflow","padding","boxShadow","paddingLeft","grid","alignSelf","form","button","useStyles","pb","py","xl","flex","flexDirection","alignItems","justifyContent","className","container","spacing","item","xs","md","pr","lg","src","require","alt","title","mb","fontFamily","Fonts","BOLD","fontSize","sm","validateOnChange","initialValues","onSubmit","data","setErrors","resetForm","isSubmitting","clone","noValidate","autoComplete","name","label","variant","type","color","disabled"],"mappings":"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","file":"static/js/97.168b2a53.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ResetPassword.b0ffe69b.png\";","import React from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport {Form, Formik, useField} from 'formik';\r\nimport * as yup from 'yup';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport IntlMessages from '../../../@crema/utility/IntlMessages';\r\nimport Box from '@material-ui/core/Box';\r\nimport {makeStyles} from '@material-ui/core';\r\nimport {Fonts} from '../../../shared/constants/AppEnums';\r\n\r\nconst MyTextField = props => {\r\n  const [field, meta] = useField(props);\r\n  const errorText = meta.error && meta.touched ? meta.error : '';\r\n  return (\r\n    <TextField\r\n      {...props}\r\n      {...field}\r\n      helperText={errorText}\r\n      error={!!errorText}\r\n    />\r\n  );\r\n};\r\n\r\nconst validationSchema = yup.object({\r\n  oldPassword: yup\r\n    .string()\r\n    .required(<IntlMessages id='validation.enterOldPassword' />),\r\n  newPassword: yup\r\n    .string()\r\n    .required(<IntlMessages id='validation.enterNewPassword' />),\r\n  confirmPassword: yup\r\n    .string()\r\n    .required(<IntlMessages id='validation.reTypePassword' />),\r\n});\r\n\r\nconst ResetPassword = () => {\r\n  const useStyles = makeStyles(theme => ({\r\n    styledImg: {\r\n      display: 'inline-block',\r\n      [theme.breakpoints.up('lg')]: {\r\n        paddingRight: 40,\r\n      },\r\n    },\r\n    textField: {\r\n      width: '100%',\r\n    },\r\n    card: {\r\n      maxWidth: 1024,\r\n      width: '100%',\r\n      textAlign: 'center',\r\n      overflow: 'hidden',\r\n      padding: 32,\r\n      boxShadow:\r\n        '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',\r\n      [theme.breakpoints.up('md')]: {\r\n        padding: 48,\r\n      },\r\n      [theme.breakpoints.up('lg')]: {\r\n        paddingRight: 48,\r\n        paddingLeft: 32,\r\n      },\r\n      [theme.breakpoints.up('xl')]: {\r\n        paddingRight: 80,\r\n        paddingLeft: 80,\r\n      },\r\n    },\r\n    grid: {\r\n      textAlign: 'center',\r\n      [theme.breakpoints.up('lg')]: {\r\n        alignSelf: 'center',\r\n      },\r\n    },\r\n    form: {\r\n      textAlign: 'left',\r\n    },\r\n    button: {\r\n      width: '100%',\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Box\r\n      pb={6}\r\n      py={{xl: 8}}\r\n      display='flex'\r\n      flex={1}\r\n      flexDirection='column'\r\n      alignItems='center'\r\n      justifyContent='center'>\r\n      <Card className={classes.card}>\r\n        <Grid container spacing={5}>\r\n          <Grid item xs={12} md={6} className={classes.grid}>\r\n            <Box pr={{lg: 10}} display='inline-block'>\r\n              <img\r\n                className={classes.styledImg}\r\n                src={require('assets/images/userPageImages/ResetPassword.png')}\r\n                alt='crema'\r\n                title='crema'\r\n              />\r\n            </Box>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={6}>\r\n            <Box\r\n              mb={{xs: 6, xl: 8}}\r\n              fontFamily={Fonts.BOLD}\r\n              fontSize={{xs: 20, sm: 20, xl: 24}}>\r\n              <IntlMessages id='common.resetPassword' />\r\n            </Box>\r\n            <Formik\r\n              validateOnChange={true}\r\n              initialValues={{\r\n                oldPassword: '',\r\n                newPassword: '',\r\n                confirmPassword: '',\r\n              }}\r\n              validationSchema={validationSchema}\r\n              onSubmit={(data, {setErrors, resetForm}) => {\r\n                if (data.newPassword !== data.confirmPassword) {\r\n                  setErrors({\r\n                    confirmPassword: (\r\n                      <IntlMessages id='validation.passwordMisMatch' />\r\n                    ),\r\n                  });\r\n                } else {\r\n                  resetForm();\r\n                }\r\n              }}>\r\n              {({isSubmitting}) => (\r\n                <Box textAlign='left' clone>\r\n                  <Form noValidate autoComplete='off'>\r\n                    <Box mb={{xs: 5, lg: 8}}>\r\n                      <MyTextField\r\n                        name='oldPassword'\r\n                        label={<IntlMessages id='common.oldPassword' />}\r\n                        className={classes.textField}\r\n                        variant='outlined'\r\n                        type='password'\r\n                      />\r\n                    </Box>\r\n\r\n                    <Box mb={{xs: 5, lg: 8}}>\r\n                      <MyTextField\r\n                        name='newPassword'\r\n                        label={<IntlMessages id='common.newPassword' />}\r\n                        className={classes.textField}\r\n                        variant='outlined'\r\n                        type='password'\r\n                      />\r\n                    </Box>\r\n\r\n                    <Box mb={{xs: 5, lg: 8}}>\r\n                      <MyTextField\r\n                        name='confirmPassword'\r\n                        label={<IntlMessages id='common.retypePassword' />}\r\n                        className={classes.textField}\r\n                        variant='outlined'\r\n                        type='password'\r\n                      />\r\n                    </Box>\r\n\r\n                    <Button\r\n                      variant='contained'\r\n                      color='primary'\r\n                      disabled={isSubmitting}\r\n                      className={classes.button}\r\n                      type='submit'>\r\n                      {<IntlMessages id='common.resetMyPassword' />}\r\n                    </Button>\r\n                  </Form>\r\n                </Box>\r\n              )}\r\n            </Formik>\r\n          </Grid>\r\n        </Grid>\r\n      </Card>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ResetPassword;\r\n"],"sourceRoot":""}