{"version":3,"sources":["assets/images/userPageImages/Unlock.png","modules/userPages/StyledUserPages/UnlockScreen.js"],"names":["module","exports","MyTextField","props","useField","field","meta","errorText","error","touched","helperText","validationSchema","yup","password","required","id","UnlockScreen","classes","makeStyles","theme","styledImg","display","card","maxWidth","width","textAlign","padding","overflow","boxShadow","breakpoints","up","paddingLeft","paddingRight","form","textField","button","useStyles","pb","py","xl","flex","flexDirection","alignItems","justifyContent","className","container","spacing","item","xs","md","src","require","alt","title","mb","fontFamily","Fonts","BOLD","fontSize","sm","component","validateOnChange","initialValues","onSubmit","data","resetForm","isSubmitting","lg","name","label","variant","type","color","disabled"],"mappings":"qFAAAA,EAAOC,QAAU,IAA0B,oC,6KCYrCC,EAAc,SAAAC,GAAU,IAAD,EACLC,YAASD,GADJ,mBACpBE,EADoB,KACbC,EADa,KAErBC,EAAYD,EAAKE,OAASF,EAAKG,QAAUH,EAAKE,MAAQ,GAC5D,OACE,kBAAC,IAAD,iBACML,EACAE,EAFN,CAGEK,WAAYH,EACZC,QAASD,MAKTI,EAAmBC,IAAW,CAClCC,SAAUD,MAEPE,SAAS,kBAAC,IAAD,CAAcC,GAAG,mCAkHhBC,UA/GM,WACnB,IAmCMC,EAnCYC,aAAW,SAAAC,GAAK,YAAK,CACrCC,UAAW,CACTC,QAAS,gBAEXC,MAAI,GACFC,SAAU,KACVC,MAAO,OACPC,UAAW,SACXC,QAAS,GACTC,SAAU,SACVC,UACE,2EAPA,cAQDT,EAAMU,YAAYC,GAAG,MAAQ,CAC5BJ,QAAS,KATT,cAWDP,EAAMU,YAAYC,GAAG,MAAQ,CAC5BC,YAAa,GACbC,aAAc,KAbd,cAeDb,EAAMU,YAAYC,GAAG,MAAQ,CAC5BC,YAAa,GACbC,aAAc,KAjBd,GAoBJC,KAAM,CACJR,UAAW,QAEbS,UAAW,CACTV,MAAO,QAETW,OAAQ,CACNX,MAAO,WAIKY,GAEhB,OACE,kBAAC,IAAD,CACEC,GAAI,EACJC,GAAI,CAACC,GAAI,GACTlB,QAAQ,OACRmB,KAAM,EACNC,cAAc,SACdC,WAAW,SACXC,eAAe,UACf,kBAAC,IAAD,CAAMC,UAAW3B,EAAQK,MACvB,kBAAC,IAAD,CAAMuB,WAAS,EAACC,QAAS,GACvB,kBAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,yBACEL,UAAW3B,EAAQG,UACnB8B,IAAKC,EAAQ,MACbC,IAAI,QACJC,MAAM,WAIV,kBAAC,IAAD,CAAMN,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAAC,IAAD,CACEK,GAAI,CAACN,GAAI,EAAGT,GAAI,GAChBgB,WAAYC,IAAMC,KAClBC,SAAU,CAACV,GAAI,GAAIW,GAAI,GAAIpB,GAAI,KAC/B,kBAAC,IAAD,CAAcxB,GAAG,yBAEnB,kBAAC,IAAD,CAAKuC,GAAI,CAACN,GAAI,EAAGT,GAAI,GAAImB,SAAU,CAACV,GAAI,GAAIT,GAAI,KAC9C,kBAAC,IAAD,CAAYqB,UAAU,QACpB,kBAAC,IAAD,CAAc7C,GAAG,gCAEnB,kBAAC,IAAD,CAAY6C,UAAU,QACpB,kBAAC,IAAD,CAAc7C,GAAG,iCAGrB,kBAAC,IAAD,CACE8C,kBAAkB,EAClBC,cAAe,CACbjD,SAAU,IAEZF,iBAAkBA,EAClBoD,SAAU,SAACC,EAAD,IACRC,EAD+B,EAAfA,gBAGjB,gBAAEC,EAAF,EAAEA,aAAF,OACC,kBAAC,IAAD,CAAMtB,UAAW3B,EAAQgB,MACvB,kBAAC,IAAD,CAAKqB,GAAI,CAACN,GAAI,EAAGmB,GAAI,IACnB,kBAACjE,EAAD,CACEkE,KAAK,WACLC,MAAO,kBAAC,IAAD,CAActD,GAAG,oBACxB6B,UAAW3B,EAAQiB,UACnBoC,QAAQ,WACRC,KAAK,cAGT,kBAAC,IAAD,CACED,QAAQ,YACRE,MAAM,UACNC,SAAUP,EACVtB,UAAW3B,EAAQkB,OACnBoC,KAAK,UACL,kBAAC,IAAD,CAAcxD,GAAG","file":"static/js/98.15950c3f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Unlock.c0bc84df.png\";","import React from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport {Form, Formik, useField} from 'formik';\r\nimport * as yup from 'yup';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport IntlMessages from '../../../@crema/utility/IntlMessages';\r\nimport Box from '@material-ui/core/Box';\r\nimport {makeStyles, Typography} from '@material-ui/core';\r\nimport {Fonts} from '../../../shared/constants/AppEnums';\r\n\r\nconst MyTextField = props => {\r\n  const [field, meta] = useField(props);\r\n  const errorText = meta.error && meta.touched ? meta.error : '';\r\n  return (\r\n    <TextField\r\n      {...props}\r\n      {...field}\r\n      helperText={errorText}\r\n      error={!!errorText}\r\n    />\r\n  );\r\n};\r\n\r\nconst validationSchema = yup.object({\r\n  password: yup\r\n    .string()\r\n    .required(<IntlMessages id='validation.passwordRequired' />),\r\n});\r\n\r\nconst UnlockScreen = () => {\r\n  const useStyles = makeStyles(theme => ({\r\n    styledImg: {\r\n      display: 'inline-block',\r\n    },\r\n    card: {\r\n      maxWidth: 1024,\r\n      width: '100%',\r\n      textAlign: 'center',\r\n      padding: 32,\r\n      overflow: 'hidden',\r\n      boxShadow:\r\n        '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',\r\n      [theme.breakpoints.up('sm')]: {\r\n        padding: 48,\r\n      },\r\n      [theme.breakpoints.up('lg')]: {\r\n        paddingLeft: 32,\r\n        paddingRight: 64,\r\n      },\r\n      [theme.breakpoints.up('xl')]: {\r\n        paddingLeft: 80,\r\n        paddingRight: 80,\r\n      },\r\n    },\r\n    form: {\r\n      textAlign: 'left',\r\n    },\r\n    textField: {\r\n      width: '100%',\r\n    },\r\n    button: {\r\n      width: '100%',\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Box\r\n      pb={6}\r\n      py={{xl: 8}}\r\n      display='flex'\r\n      flex={1}\r\n      flexDirection='column'\r\n      alignItems='center'\r\n      justifyContent='center'>\r\n      <Card className={classes.card}>\r\n        <Grid container spacing={5}>\r\n          <Grid item xs={12} md={6}>\r\n            <img\r\n              className={classes.styledImg}\r\n              src={require('assets/images/userPageImages/Unlock.png')}\r\n              alt='crema'\r\n              title='crema'\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={6}>\r\n            <Box\r\n              mb={{xs: 6, xl: 8}}\r\n              fontFamily={Fonts.BOLD}\r\n              fontSize={{xs: 20, sm: 20, xl: 24}}>\r\n              <IntlMessages id='common.unlockScreen' />\r\n            </Box>\r\n            <Box mb={{xs: 5, xl: 8}} fontSize={{xs: 16, xl: 18}}>\r\n              <Typography component='span'>\r\n                <IntlMessages id='common.unlockScreenTextOne' />\r\n              </Typography>\r\n              <Typography component='span'>\r\n                <IntlMessages id='common.unlockScreenTextTwo' />\r\n              </Typography>\r\n            </Box>\r\n            <Formik\r\n              validateOnChange={true}\r\n              initialValues={{\r\n                password: '',\r\n              }}\r\n              validationSchema={validationSchema}\r\n              onSubmit={(data, {resetForm}) => {\r\n                resetForm();\r\n              }}>\r\n              {({isSubmitting}) => (\r\n                <Form className={classes.form}>\r\n                  <Box mb={{xs: 5, lg: 8}}>\r\n                    <MyTextField\r\n                      name='password'\r\n                      label={<IntlMessages id='common.password' />}\r\n                      className={classes.textField}\r\n                      variant='outlined'\r\n                      type='password'\r\n                    />\r\n                  </Box>\r\n                  <Button\r\n                    variant='contained'\r\n                    color='primary'\r\n                    disabled={isSubmitting}\r\n                    className={classes.button}\r\n                    type='submit'>\r\n                    <IntlMessages id='common.unlockItForMe' />\r\n                  </Button>\r\n                </Form>\r\n              )}\r\n            </Formik>\r\n          </Grid>\r\n        </Grid>\r\n      </Card>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UnlockScreen;\r\n"],"sourceRoot":""}