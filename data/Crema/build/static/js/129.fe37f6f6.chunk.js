(this.webpackJsonpcrema=this.webpackJsonpcrema||[]).push([[129],{2798:function(e,r,n){"use strict";n.r(r);var t=n(0),a=n.n(t),o=n(278),i=n(279),s=n(494),l=n(281),d=n(280),p=n(19),m=n(1723),c=[{id:"1000",name:"Aysha Julka",handle:"ayshajulkaji",image:n(139)},{id:"1001",name:"Ayra Rovishi",handle:"ayrarovishi",image:n(210)},{id:"1002",name:"Sapna Awasthi",handle:"sapnaawasthi",image:n(297)},{id:"1003",name:"Sami Rudri",handle:"samirudri",image:n(211)},{id:"1004",name:"Brian Lara",handle:"brianlara",image:n(212)},{id:"1005",name:"Rickey Ponting",handle:"rickeyponting",image:n(177)},{id:"1007",name:"Smriti Mandhana",handle:"smritimandhana",image:n(302)},{id:"1008",name:"Aysha Julka",handle:"benstokes",image:n(298)}],u=n(332),g=n(227),x=n(564),f=n(266),b=n(52),h=n(11),y=n(1881),v=function(e){Object(l.a)(n,e);var r=Object(d.a)(n);function n(e,t){var a;return Object(o.a)(this,n),(a=r.call(this,e,t)).state={items:c},a.onDragEnd=a.onDragEnd.bind(Object(s.a)(a)),a}return Object(i.a)(n,[{key:"onDragEnd",value:function(e){if(e.destination){var r=function(e,r,n){var t=Array.from(e),a=t.splice(r,1),o=Object(p.a)(a,1)[0];return t.splice(n,0,o),t}(this.state.items,e.source.index,e.destination.index);this.setState({items:r})}}},{key:"render",value:function(){var e=this,r=this.props.classes;return a.a.createElement(m.a,{onDragEnd:this.onDragEnd},a.a.createElement(m.c,{droppableId:"droppable"},(function(n,t){return a.a.createElement(b.a,{display:"flex",flexDirection:"column",alignItems:"center"},a.a.createElement(b.a,{ref:n.innerRef,style:(t.isDraggingOver,o=e.props.overflow,{border:"5px solid pink",padding:8,maxHeight:"50vh",overflow:o,width:300,"@media (min-width: 600px)":{width:300}}),onScroll:function(e){}},e.state.items.map((function(e,n){return a.a.createElement(m.b,{key:e.id,draggableId:e.handle,index:n},(function(n,t){return a.a.createElement(b.a,Object.assign({ref:n.innerRef},n.draggableProps,n.dragHandleProps),a.a.createElement(b.a,{px:2,mb:5,clone:!0},a.a.createElement(f.a,{className:r.rootList},a.a.createElement(b.a,{mr:3,mt:0,display:"flex",justifyContent:"center",clone:!0},a.a.createElement(u.a,null,a.a.createElement(g.a,{alt:"Remy Sharp",src:e.image}))),a.a.createElement(b.a,{my:0,clone:!0},a.a.createElement(x.a,{primary:a.a.createElement(b.a,{component:"span",fontFamily:h.a.BOLD},e.name),secondary:a.a.createElement(b.a,{component:"span",display:"block",color:"text.secondary",overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"},"@",e.handle)})))))}))})),n.placeholder));var o})))}}]),n}(t.Component);v.defaultProps={overflow:"auto"};var D=Object(y.a)((function(e){return{rootList:{backgroundColor:e.palette.background.paper}}}))(v),E=function(e){Object(l.a)(n,e);var r=Object(d.a)(n);function n(e){var t;return Object(o.a)(this,n),(t=r.call(this,e)).state={items:c.slice(0,6)},t.onDragEnd=t.onDragEnd.bind(Object(s.a)(t)),t}return Object(i.a)(n,[{key:"onDragEnd",value:function(e){if(e.destination){var r=function(e,r,n){var t=Array.from(e),a=t.splice(r,1),o=Object(p.a)(a,1)[0];return t.splice(n,0,o),t}(this.state.items,e.source.index,e.destination.index);this.setState({items:r})}}},{key:"render",value:function(){var e=this,r=this.props.classes;return a.a.createElement(m.a,{onDragEnd:this.onDragEnd},a.a.createElement(m.c,{droppableId:"droppable",direction:"horizontal"},(function(n,t){return a.a.createElement("div",Object.assign({ref:n.innerRef,style:(t.isDraggingOver,{border:"5px solid #E0E0E0",display:"flex",padding:8,overflow:"auto"})},n.droppableProps),e.state.items.map((function(e,n){return a.a.createElement(m.b,{key:e.id,draggableId:e.handle,index:n},(function(n,t){return a.a.createElement(b.a,Object.assign({mr:3,ref:n.innerRef},n.draggableProps,n.dragHandleProps),a.a.createElement(b.a,{p:2,width:"16rem",mr:2,clone:!0},a.a.createElement(f.a,{className:r.rootList},a.a.createElement(b.a,{mr:3,mt:0,ml:1.5,display:"flex",justifyContent:"center",clone:!0},a.a.createElement(u.a,null,a.a.createElement(g.a,{alt:"Remy Sharp",src:e.image}))),a.a.createElement(b.a,{my:0,clone:!0},a.a.createElement(x.a,{primary:a.a.createElement(b.a,{component:"span",fontFamily:h.a.BOLD},e.name),secondary:a.a.createElement(b.a,{component:"span",display:"block",color:"text.secondary"},"@",e.handle)})))))}))})),n.placeholder)})))}}]),n}(t.Component),I=Object(y.a)((function(e){return{rootList:{backgroundColor:e.palette.background.paper}}}))(E),L=n(9),w=n(171),B=function(e,r,n){var t=Array.from(e),a=t.splice(r,1),o=Object(p.a)(a,1)[0];return t.splice(n,0,o),t},S=function(e,r,n,t){var a=Array.from(e),o=Array.from(r),i=a.splice(n.compose,1),s=Object(p.a)(i,1)[0];o.splice(t.compose,0,s);var l={};return l[n.droppableId]=a,l[t.droppableId]=o,l},k=function(e){return{background:e?"lightblue":"lightgrey",border:"5px solid #E0E0E0",padding:8,marginRight:10,marginBottom:20,width:300,"@media (min-width: 600px)":{width:300}}},O=function(e){Object(l.a)(n,e);var r=Object(d.a)(n);function n(){var e;Object(o.a)(this,n);for(var t=arguments.length,a=new Array(t),i=0;i<t;i++)a[i]=arguments[i];return(e=r.call.apply(r,[this].concat(a))).state={items:c.slice(0,10),selected:c.slice(5,10)},e.id2List={droppable:"items",droppable2:"selected"},e.getList=function(r){return e.state[e.id2List[r]]},e.onDragEnd=function(r){var n=r.source,t=r.destination;if(t)if(n.droppableId===t.droppableId){var a=B(e.getList(n.droppableId),n.index,t.index),o={items:a};"droppable2"===n.droppableId&&(o={selected:a}),e.setState(o)}else{var i=S(e.getList(n.droppableId),e.getList(t.droppableId),n,t);e.setState({items:i.droppable,selected:i.droppable2})}},e}return Object(i.a)(n,[{key:"render",value:function(){var e=this,r=this.props.classes;return a.a.createElement(m.a,{onDragEnd:this.onDragEnd},a.a.createElement(b.a,{display:"flex",flexDirection:{xs:"column",sm:"row"},justifyContent:{sm:"center"},alignItems:"center"},a.a.createElement(m.c,{droppableId:"droppable"},(function(n,t){return a.a.createElement(b.a,{ref:n.innerRef,style:k(t.isDraggingOver)},e.state.items.map((function(e,n){return a.a.createElement(m.b,{key:e.id,draggableId:e.handle,index:n},(function(n,t){return a.a.createElement(b.a,Object.assign({ref:n.innerRef},n.draggableProps,n.dragHandleProps),a.a.createElement(b.a,{px:2,bgcolor:w.a[300],mb:5,clone:!0},a.a.createElement(f.a,{className:r.rootList},a.a.createElement(b.a,{mr:3,mt:0,ml:1.5,display:"flex",justifyContent:"center",clone:!0},a.a.createElement(u.a,null,a.a.createElement(g.a,{alt:"Remy Sharp",src:e.image}))),a.a.createElement(b.a,{my:0,clone:!0},a.a.createElement(x.a,{primary:a.a.createElement(b.a,{component:"span",fontFamily:h.a.BOLD},e.name),secondary:a.a.createElement(b.a,{component:"span",display:"block",color:"text.secondary",overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"},"@",e.handle)})))))}))})),n.placeholder)})),a.a.createElement(m.c,{droppableId:"droppable2"},(function(n,t){return a.a.createElement(b.a,{ref:n.innerRef,style:k(t.isDraggingOver)},e.state.selected.map((function(e,n){return a.a.createElement(m.b,{key:e.id,draggableId:e.id,index:n},(function(n,t){return a.a.createElement(b.a,Object.assign({ref:n.innerRef},n.draggableProps,n.dragHandleProps,{style:(o=t.isDragging,i=n.draggableProps.style,Object(L.a)({userSelect:"none",padding:8,margin:"0 0 20px 0",background:o?"lightgreen":"#E0E0E0"},i))}),a.a.createElement(b.a,{p:0,clone:!0},a.a.createElement(f.a,{className:r.rootList},a.a.createElement(b.a,{mr:3,mt:0,ml:1.5,display:"flex",justifyContent:"center",clone:!0},a.a.createElement(u.a,null,a.a.createElement(g.a,{alt:"Remy Sharp",src:e.image}))),a.a.createElement(b.a,{my:0,clone:!0},a.a.createElement(x.a,{primary:a.a.createElement(b.a,{component:"span",fontFamily:h.a.BOLD},e.name),secondary:a.a.createElement(b.a,{component:"span",display:"block",color:"text.secondary",overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"},"@",e.handle)})))));var o,i}))})),n.placeholder)}))))}}]),n}(t.Component),A=Object(y.a)((function(e){return{rootList:{backgroundColor:e.palette.background.paper}}}))(O),j=n(2567),C=n(1),P=n(2732),R=n(228);function q(){var e=Object(j.a)(["\n  width: 170px;\n  margin-bottom: 20px;\n  background-color: #e0e0e0;\n  padding: ","px;\n  @media (min-width: 600px) {\n    width: 300px;\n  }\n"]);return q=function(){return e},e}var F=Object(R.a)((function(e){return{root:Object(C.a)({},e.breakpoints.down("xs"),{width:"100%","& .css-1gwkzgr":{width:"100%"}}),rootList:{backgroundColor:e.palette.background.paper}}})),H=P.a.div(q(),8);function T(e){var r=e.quote,n=e.index,t=F();return a.a.createElement(m.b,{draggableId:r.handle,index:n},(function(e){return a.a.createElement(H,Object.assign({ref:e.innerRef},e.draggableProps,e.dragHandleProps),a.a.createElement(b.a,{p:0,clone:!0},a.a.createElement(f.a,{className:t.rootList},a.a.createElement(b.a,{mr:3,mt:0,ml:1.5,display:"flex",justifyContent:"center",clone:!0},a.a.createElement(u.a,null,a.a.createElement(g.a,{alt:"Remy Sharp",src:r.image}))),a.a.createElement(b.a,{my:0,clone:!0},a.a.createElement(x.a,{primary:a.a.createElement(b.a,{component:"span",fontFamily:h.a.BOLD},r.name),secondary:a.a.createElement(b.a,{component:"span",display:"block",color:"text.secondary",overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"},"@",r.handle)})))))}))}var N=a.a.memo((function(e){return e.quotes.map((function(e,r){return a.a.createElement(T,{quote:e,index:r,key:e.id})}))})),Q=function(){var e=Object(t.useState)({quotes:c}),r=Object(p.a)(e,2),n=r[0],o=r[1],i=F();return a.a.createElement(m.a,{onDragEnd:function(e){if(e.destination&&e.destination.compose!==e.source.compose){var r=function(e,r,n){var t=Array.from(e),a=t.splice(r,1),o=Object(p.a)(a,1)[0];return t.splice(n,0,o),t}(n.quotes,e.source.index,e.destination.index);o({quotes:r})}}},a.a.createElement(b.a,{width:1,display:"flex",flexDirection:"column",alignItems:"center"},a.a.createElement(b.a,{className:i.root,border:"solid 4px ".concat(w.a[300]),p:2,mb:3},a.a.createElement(m.c,{droppableId:"list"},(function(e){return a.a.createElement(b.a,Object.assign({ref:e.innerRef},e.droppableProps),a.a.createElement(N,{quotes:n.quotes}),e.placeholder)})))))},z=n(474),M=n(473),J=n(472),W=n(407);r.default=function(){return a.a.createElement(a.a.Fragment,null,a.a.createElement(M.a,{title:"React Beautiful Dnd",description:"Beautiful and accessible drag and drop for lists with React",refUrl:"https://react-beautiful-dnd.netlify.com/?path=/story/single-vertical-list--basic"}),a.a.createElement(J.a,null,a.a.createElement(W.a,{item:!0,xs:12,xl:6},a.a.createElement(z.a,{title:"Simple",component:D,source:"import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {DragDropContext, Draggable, Droppable} from 'react-beautiful-dnd';\r\nimport simpleListData from '../../../../@crema/services/db/extraPages/dndData/simpleListData';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport Box from '@material-ui/core/Box';\r\nimport {Fonts} from '../../../../shared/constants/AppEnums';\r\nimport withStyles from '@material-ui/core/es/styles/withStyles';\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n  const result = Array.from(list);\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n  return result;\r\n};\r\n\r\nconst grid = 8;\r\n\r\nconst styles = theme => {\r\n  return {\r\n    rootList: {\r\n      backgroundColor: theme.palette.background.paper,\r\n    },\r\n  };\r\n};\r\n\r\nconst getListStyle = (isDraggingOver, overflow) => ({\r\n  // background: isDraggingOver ? 'lightblue' : 'grey',\r\n  border: '5px solid pink',\r\n  padding: grid,\r\n  maxHeight: '50vh',\r\n  overflow,\r\n  width: 300,\r\n  '@media (min-width: 600px)': {\r\n    width: 300,\r\n  },\r\n});\r\n\r\nclass Simple extends Component {\r\n  static propTypes = {\r\n    overflow: PropTypes.string,\r\n  };\r\n  static defaultProps = {\r\n    overflow: 'auto',\r\n  };\r\n\r\n  constructor(props, context) {\r\n    super(props, context);\r\n    this.state = {\r\n      items: simpleListData,\r\n    };\r\n    this.onDragEnd = this.onDragEnd.bind(this);\r\n  }\r\n\r\n  onDragEnd(result) {\r\n    // dropped outside the list\r\n    if (!result.destination) {\r\n      return;\r\n    }\r\n\r\n    const items = reorder(\r\n      this.state.items,\r\n      result.source.index,\r\n      result.destination.index,\r\n    );\r\n\r\n    this.setState({\r\n      items,\r\n    });\r\n  }\r\n\r\n  // Normally you would want to split things out into separate core.\r\n  // But in this example everything is just done in one place for simplicity\r\n  render() {\r\n    const {classes} = this.props;\r\n    return (\r\n      <DragDropContext onDragEnd={this.onDragEnd}>\r\n        <Droppable droppableId='droppable'>\r\n          {(droppableProvided, droppableSnapshot) => (\r\n            <Box display='flex' flexDirection='column' alignItems='center'>\r\n              <Box\r\n                ref={droppableProvided.innerRef}\r\n                style={getListStyle(\r\n                  droppableSnapshot.isDraggingOver,\r\n                  this.props.overflow,\r\n                )}\r\n                onScroll={\r\n                  e => {}\r\n                  // eslint-disable-next-line no-console\r\n                }>\r\n                {this.state.items.map((item, index) => (\r\n                  <Draggable\r\n                    key={item.id}\r\n                    draggableId={item.handle}\r\n                    index={index}>\r\n                    {(draggableProvided, draggableSnapshot) => (\r\n                      <Box\r\n                        ref={draggableProvided.innerRef}\r\n                        {...draggableProvided.draggableProps}\r\n                        {...draggableProvided.dragHandleProps}>\r\n                        <Box px={2} mb={5} clone>\r\n                          <ListItem className={classes.rootList}>\r\n                            <Box\r\n                              mr={3}\r\n                              mt={0}\r\n                              display='flex'\r\n                              justifyContent='center'\r\n                              clone>\r\n                              <ListItemAvatar>\r\n                                <Avatar alt='Remy Sharp' src={item.image} />\r\n                              </ListItemAvatar>\r\n                            </Box>\r\n                            <Box my={0} clone>\r\n                              <ListItemText\r\n                                primary={\r\n                                  <Box component='span' fontFamily={Fonts.BOLD}>\r\n                                    {item.name}\r\n                                  </Box>\r\n                                }\r\n                                secondary={\r\n                                  <Box\r\n                                    component='span'\r\n                                    display='block'\r\n                                    color='text.secondary'\r\n                                    overflow='hidden'\r\n                                    textOverflow='ellipsis'\r\n                                    whiteSpace='nowrap'>\r\n                                    @{item.handle}\r\n                                  </Box>\r\n                                }\r\n                              />\r\n                            </Box>\r\n                          </ListItem>\r\n                        </Box>\r\n                      </Box>\r\n                    )}\r\n                  </Draggable>\r\n                ))}\r\n                {droppableProvided.placeholder}\r\n              </Box>\r\n            </Box>\r\n          )}\r\n        </Droppable>\r\n      </DragDropContext>\r\n    );\r\n  }\r\n}\r\nexport default withStyles(styles)(Simple);\r\n"})),a.a.createElement(W.a,{item:!0,xs:12,xl:6},a.a.createElement(z.a,{title:"WithHooks",component:Q,source:"import React, {useState} from 'react';\r\nimport styled from '@emotion/styled';\r\nimport {DragDropContext, Draggable, Droppable} from 'react-beautiful-dnd';\r\nimport simpleListData from '../../../../@crema/services/db/extraPages/dndData/simpleListData';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport Box from '@material-ui/core/Box';\r\nimport {grey} from '@material-ui/core/colors';\r\nimport {Fonts} from '../../../../shared/constants/AppEnums';\r\nimport {makeStyles} from '@material-ui/core';\r\n\r\nconst grid = 8;\r\nconst reorder = (list, startIndex, endIndex) => {\r\n  const result = Array.from(list);\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n\r\n  return result;\r\n};\r\n\r\nconst useStyles = makeStyles(theme => {\r\n  return {\r\n    root: {\r\n      [theme.breakpoints.down('xs')]: {\r\n        width: '100%',\r\n        '& .css-1gwkzgr': {\r\n          width: '100%',\r\n        },\r\n      },\r\n    },\r\n    rootList: {\r\n      backgroundColor: theme.palette.background.paper,\r\n    },\r\n  };\r\n});\r\n\r\nconst QuoteItem = styled.div`\r\n  width: 170px;\r\n  margin-bottom: 20px;\r\n  background-color: #e0e0e0;\r\n  padding: ${grid}px;\r\n  @media (min-width: 600px) {\r\n    width: 300px;\r\n  }\r\n`;\r\n\r\nfunction Quote({quote, index}) {\r\n  const classes = useStyles();\r\n  return (\r\n    <Draggable draggableId={quote.handle} index={index}>\r\n      {provided => (\r\n        <QuoteItem\r\n          ref={provided.innerRef}\r\n          {...provided.draggableProps}\r\n          {...provided.dragHandleProps}>\r\n          <Box p={0} clone>\r\n            <ListItem className={classes.rootList}>\r\n              <Box\r\n                mr={3}\r\n                mt={0}\r\n                ml={1.5}\r\n                display='flex'\r\n                justifyContent='center'\r\n                clone>\r\n                <ListItemAvatar>\r\n                  <Avatar alt='Remy Sharp' src={quote.image} />\r\n                </ListItemAvatar>\r\n              </Box>\r\n\r\n              <Box my={0} clone>\r\n                <ListItemText\r\n                  primary={\r\n                    <Box component='span' fontFamily={Fonts.BOLD}>\r\n                      {quote.name}\r\n                    </Box>\r\n                  }\r\n                  secondary={\r\n                    <Box\r\n                      component='span'\r\n                      display='block'\r\n                      color='text.secondary'\r\n                      overflow='hidden'\r\n                      textOverflow='ellipsis'\r\n                      whiteSpace='nowrap'>\r\n                      @{quote.handle}\r\n                    </Box>\r\n                  }\r\n                />\r\n              </Box>\r\n            </ListItem>\r\n          </Box>\r\n        </QuoteItem>\r\n      )}\r\n    </Draggable>\r\n  );\r\n}\r\n\r\nconst QuoteList = React.memo(function QuoteList({quotes}) {\r\n  return quotes.map((quote, index) => (\r\n    <Quote quote={quote} index={index} key={quote.id} />\r\n  ));\r\n});\r\n\r\nconst WithHooks = () => {\r\n  const [state, setState] = useState({quotes: simpleListData});\r\n  const classes = useStyles();\r\n\r\n  function onDragEnd(result) {\r\n    if (!result.destination) {\r\n      return;\r\n    }\r\n\r\n    if (result.destination.compose === result.source.compose) {\r\n      return;\r\n    }\r\n\r\n    const quotes = reorder(\r\n      state.quotes,\r\n      result.source.index,\r\n      result.destination.index,\r\n    );\r\n\r\n    setState({quotes});\r\n  }\r\n\r\n  return (\r\n    <DragDropContext onDragEnd={onDragEnd}>\r\n      <Box width={1} display='flex' flexDirection='column' alignItems='center'>\r\n        <Box\r\n          className={classes.root}\r\n          border={`solid 4px ${grey[300]}`}\r\n          p={2}\r\n          mb={3}>\r\n          <Droppable droppableId='list'>\r\n            {provided => (\r\n              <Box ref={provided.innerRef} {...provided.droppableProps}>\r\n                <QuoteList quotes={state.quotes} />\r\n                {provided.placeholder}\r\n              </Box>\r\n            )}\r\n          </Droppable>\r\n        </Box>\r\n      </Box>\r\n    </DragDropContext>\r\n  );\r\n};\r\nexport default WithHooks;\r\n"})),a.a.createElement(W.a,{item:!0,xs:12},a.a.createElement(z.a,{title:"MultipleDrop",component:A,source:"import React, {Component} from 'react';\r\nimport {DragDropContext, Draggable, Droppable} from 'react-beautiful-dnd';\r\nimport simpleListData from '../../../../@crema/services/db/extraPages/dndData/simpleListData';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport Box from '@material-ui/core/Box';\r\nimport {grey} from '@material-ui/core/colors';\r\nimport {Fonts} from '../../../../shared/constants/AppEnums';\r\nimport withStyles from '@material-ui/core/es/styles/withStyles';\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n  const result = Array.from(list);\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Moves an item from one list to another list.\r\n */\r\nconst move = (source, destination, droppableSource, droppableDestination) => {\r\n  const sourceClone = Array.from(source);\r\n  const destClone = Array.from(destination);\r\n  const [removed] = sourceClone.splice(droppableSource.compose, 1);\r\n\r\n  destClone.splice(droppableDestination.compose, 0, removed);\r\n\r\n  const result = {};\r\n  result[droppableSource.droppableId] = sourceClone;\r\n  result[droppableDestination.droppableId] = destClone;\r\n\r\n  return result;\r\n};\r\n\r\nconst grid = 8;\r\n\r\nconst styles = theme => {\r\n  return {\r\n    rootList: {\r\n      backgroundColor: theme.palette.background.paper,\r\n    },\r\n  };\r\n};\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n  // some basic styles to make the items look a bit nicer\r\n  userSelect: 'none',\r\n  padding: grid,\r\n  margin: `0 0 20px 0`,\r\n\r\n  // change background colour if dragging\r\n  background: isDragging ? 'lightgreen' : '#E0E0E0',\r\n\r\n  // styles we need to apply on draggables\r\n  ...draggableStyle,\r\n});\r\n\r\nconst getListStyle = isDraggingOver => ({\r\n  background: isDraggingOver ? 'lightblue' : 'lightgrey',\r\n  border: '5px solid #E0E0E0',\r\n  padding: grid,\r\n  marginRight: 10,\r\n  marginBottom: 20,\r\n  width: 300,\r\n  '@media (min-width: 600px)': {\r\n    width: 300,\r\n  },\r\n});\r\n\r\nclass MultipleDrop extends Component {\r\n  state = {\r\n    items: simpleListData.slice(0, 10),\r\n    selected: simpleListData.slice(5, 10),\r\n  };\r\n\r\n  /**\r\n   * A semi-generic way to handle multiple lists. Matches\r\n   * the IDs of the droppable container to the names of the\r\n   * source arrays stored in the state.\r\n   */\r\n  id2List = {\r\n    droppable: 'items',\r\n    droppable2: 'selected',\r\n  };\r\n\r\n  getList = id => this.state[this.id2List[id]];\r\n\r\n  onDragEnd = result => {\r\n    const {source, destination} = result;\r\n\r\n    // dropped outside the list\r\n    if (!destination) {\r\n      return;\r\n    }\r\n\r\n    if (source.droppableId === destination.droppableId) {\r\n      const items = reorder(\r\n        this.getList(source.droppableId),\r\n        source.index,\r\n        destination.index,\r\n      );\r\n\r\n      let state = {items};\r\n\r\n      if (source.droppableId === 'droppable2') {\r\n        state = {selected: items};\r\n      }\r\n\r\n      this.setState(state);\r\n    } else {\r\n      const result = move(\r\n        this.getList(source.droppableId),\r\n        this.getList(destination.droppableId),\r\n        source,\r\n        destination,\r\n      );\r\n\r\n      this.setState({\r\n        items: result.droppable,\r\n        selected: result.droppable2,\r\n      });\r\n    }\r\n  };\r\n\r\n  // Normally you would want to split things out into separate core.\r\n  // But in this example everything is just done in one place for simplicity\r\n  render() {\r\n    const {classes} = this.props;\r\n    return (\r\n      <DragDropContext onDragEnd={this.onDragEnd}>\r\n        <Box\r\n          display='flex'\r\n          flexDirection={{xs: 'column', sm: 'row'}}\r\n          justifyContent={{sm: 'center'}}\r\n          alignItems='center'>\r\n          <Droppable droppableId='droppable'>\r\n            {(provided, snapshot) => (\r\n              <Box\r\n                ref={provided.innerRef}\r\n                style={getListStyle(snapshot.isDraggingOver)}>\r\n                {this.state.items.map((item, index) => (\r\n                  <Draggable\r\n                    key={item.id}\r\n                    draggableId={item.handle}\r\n                    index={index}>\r\n                    {(provided, snapshot) => (\r\n                      <Box\r\n                        ref={provided.innerRef}\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}>\r\n                        <Box px={2} bgcolor={grey[300]} mb={5} clone>\r\n                          <ListItem className={classes.rootList}>\r\n                            <Box\r\n                              mr={3}\r\n                              mt={0}\r\n                              ml={1.5}\r\n                              display='flex'\r\n                              justifyContent='center'\r\n                              clone>\r\n                              <ListItemAvatar>\r\n                                <Avatar alt='Remy Sharp' src={item.image} />\r\n                              </ListItemAvatar>\r\n                            </Box>\r\n                            <Box my={0} clone>\r\n                              <ListItemText\r\n                                primary={\r\n                                  <Box component='span' fontFamily={Fonts.BOLD}>\r\n                                    {item.name}\r\n                                  </Box>\r\n                                }\r\n                                secondary={\r\n                                  <Box\r\n                                    component='span'\r\n                                    display='block'\r\n                                    color='text.secondary'\r\n                                    overflow='hidden'\r\n                                    textOverflow='ellipsis'\r\n                                    whiteSpace='nowrap'>\r\n                                    @{item.handle}\r\n                                  </Box>\r\n                                }\r\n                              />\r\n                            </Box>\r\n                          </ListItem>\r\n                        </Box>\r\n                      </Box>\r\n                    )}\r\n                  </Draggable>\r\n                ))}\r\n                {provided.placeholder}\r\n              </Box>\r\n            )}\r\n          </Droppable>\r\n          <Droppable droppableId='droppable2'>\r\n            {(provided, snapshot) => (\r\n              <Box\r\n                ref={provided.innerRef}\r\n                style={getListStyle(snapshot.isDraggingOver)}>\r\n                {this.state.selected.map((item, index) => (\r\n                  <Draggable key={item.id} draggableId={item.id} index={index}>\r\n                    {(provided, snapshot) => (\r\n                      <Box\r\n                        ref={provided.innerRef}\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                        style={getItemStyle(\r\n                          snapshot.isDragging,\r\n                          provided.draggableProps.style,\r\n                        )}>\r\n                        <Box p={0} clone>\r\n                          <ListItem className={classes.rootList}>\r\n                            <Box\r\n                              mr={3}\r\n                              mt={0}\r\n                              ml={1.5}\r\n                              display='flex'\r\n                              justifyContent='center'\r\n                              clone>\r\n                              <ListItemAvatar>\r\n                                <Avatar alt='Remy Sharp' src={item.image} />\r\n                              </ListItemAvatar>\r\n                            </Box>\r\n                            <Box my={0} clone>\r\n                              <ListItemText\r\n                                primary={\r\n                                  <Box component='span' fontFamily={Fonts.BOLD}>\r\n                                    {item.name}\r\n                                  </Box>\r\n                                }\r\n                                secondary={\r\n                                  <Box\r\n                                    component='span'\r\n                                    display='block'\r\n                                    color='text.secondary'\r\n                                    overflow='hidden'\r\n                                    textOverflow='ellipsis'\r\n                                    whiteSpace='nowrap'>\r\n                                    @{item.handle}\r\n                                  </Box>\r\n                                }\r\n                              />\r\n                            </Box>\r\n                          </ListItem>\r\n                        </Box>\r\n                      </Box>\r\n                    )}\r\n                  </Draggable>\r\n                ))}\r\n                {provided.placeholder}\r\n              </Box>\r\n            )}\r\n          </Droppable>\r\n        </Box>\r\n      </DragDropContext>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(MultipleDrop);\r\n"})),a.a.createElement(W.a,{item:!0,xs:12},a.a.createElement(z.a,{title:"Horizontal",component:I,source:"import React, {Component} from 'react';\r\nimport {DragDropContext, Draggable, Droppable} from 'react-beautiful-dnd';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport simpleListData from '../../../../@crema/services/db/extraPages/dndData/simpleListData';\r\nimport Box from '@material-ui/core/Box';\r\nimport {Fonts} from '../../../../shared/constants/AppEnums';\r\nimport withStyles from '@material-ui/core/es/styles/withStyles';\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n  const result = Array.from(list);\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n\r\n  return result;\r\n};\r\n\r\nconst grid = 8;\r\n\r\nconst styles = theme => {\r\n  return {\r\n    rootList: {\r\n      backgroundColor: theme.palette.background.paper,\r\n    },\r\n  };\r\n};\r\n\r\nconst getListStyle = isDraggingOver => ({\r\n  // background: isDraggingOver ? 'lightblue' : 'lightgrey',\r\n  border: '5px solid #E0E0E0',\r\n  display: 'flex',\r\n  padding: grid,\r\n  overflow: 'auto',\r\n});\r\n\r\nclass Horizontal extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      items: simpleListData.slice(0, 6),\r\n    };\r\n    this.onDragEnd = this.onDragEnd.bind(this);\r\n  }\r\n\r\n  onDragEnd(result) {\r\n    // dropped outside the list\r\n    if (!result.destination) {\r\n      return;\r\n    }\r\n\r\n    const items = reorder(\r\n      this.state.items,\r\n      result.source.index,\r\n      result.destination.index,\r\n    );\r\n\r\n    this.setState({\r\n      items,\r\n    });\r\n  }\r\n\r\n  // Normally you would want to split things out into separate core.\r\n  // But in this example everything is just done in one place for simplicity\r\n  render() {\r\n    const {classes} = this.props;\r\n    return (\r\n      <DragDropContext onDragEnd={this.onDragEnd}>\r\n        <Droppable droppableId='droppable' direction='horizontal'>\r\n          {(provided, snapshot) => (\r\n            <div\r\n              ref={provided.innerRef}\r\n              style={getListStyle(snapshot.isDraggingOver)}\r\n              {...provided.droppableProps}>\r\n              {this.state.items.map((item, index) => (\r\n                <Draggable\r\n                  key={item.id}\r\n                  draggableId={item.handle}\r\n                  index={index}>\r\n                  {(provided, snapshot) => (\r\n                    <Box\r\n                      mr={3}\r\n                      ref={provided.innerRef}\r\n                      {...provided.draggableProps}\r\n                      {...provided.dragHandleProps}>\r\n                      <Box p={2} width='16rem' mr={2} clone>\r\n                        <ListItem className={classes.rootList}>\r\n                          <Box\r\n                            mr={3}\r\n                            mt={0}\r\n                            ml={1.5}\r\n                            display='flex'\r\n                            justifyContent='center'\r\n                            clone>\r\n                            <ListItemAvatar>\r\n                              <Avatar alt='Remy Sharp' src={item.image} />\r\n                            </ListItemAvatar>\r\n                          </Box>\r\n                          <Box my={0} clone>\r\n                            <ListItemText\r\n                              primary={\r\n                                <Box component='span' fontFamily={Fonts.BOLD}>\r\n                                  {item.name}\r\n                                </Box>\r\n                              }\r\n                              secondary={\r\n                                <Box\r\n                                  component='span'\r\n                                  display='block'\r\n                                  color='text.secondary'>\r\n                                  @{item.handle}\r\n                                </Box>\r\n                              }\r\n                            />\r\n                          </Box>\r\n                        </ListItem>\r\n                      </Box>\r\n                    </Box>\r\n                  )}\r\n                </Draggable>\r\n              ))}\r\n              {provided.placeholder}\r\n            </div>\r\n          )}\r\n        </Droppable>\r\n      </DragDropContext>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(Horizontal);\r\n"}))))}}}]);
//# sourceMappingURL=129.fe37f6f6.chunk.js.map