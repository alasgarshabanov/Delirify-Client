{"version":3,"sources":["modules/thirdParty/googleMap/GeoLocation/Components/GeoLocation.js","modules/thirdParty/googleMap/GeoLocation/index.js","webpack:///./src/modules/thirdParty/googleMap/GeoLocation/Components/GeoLocation.js?0e5e"],"names":["geolocation","canUseDOM","navigator","getCurrentPosition","success","failure","GeolocationExampleGoogleMap","withGoogleMap","props","defaultZoom","center","position","content","radius","options","fillColor","fillOpacity","strokeColor","strokeOpacity","strokeWeight","GeolocationExample","state","isUnmounted","tick","setState","Math","max","raf","lat","coords","latitude","lng","longitude","reason","this","containerElement","className","mapElement","Component","GeoLocationEx","ComponentHeader","title","refUrl","GridContainer","Grid","item","xs","ComponentCard","component","GeoLocation","source"],"mappings":"qPAKMA,EACJC,KAAaC,UAAUF,YACnBE,UAAUF,YACV,CACEG,mBADF,SACqBC,EAASC,GAC1BA,EAAQ,+CAIZC,EAA8BC,yBAAc,SAAAC,GAAK,OACrD,kBAAC,YAAD,CAAWC,YAAa,GAAIC,OAAQF,EAAME,QACvCF,EAAME,QACL,kBAAC,aAAD,CAAYC,SAAUH,EAAME,QAC1B,6BAAMF,EAAMI,UAGfJ,EAAME,QACL,kBAAC,SAAD,CACEA,OAAQF,EAAME,OACdG,OAAQL,EAAMK,OACdC,QAAS,CACPC,UAAW,MACXC,YAAa,GACbC,YAAa,MACbC,cAAe,EACfC,aAAc,SAYHC,E,4MACnBC,MAAQ,CACNX,OAAQ,KACRE,QAAS,KACTC,OAAQ,K,EAGVS,aAAc,E,kEAEO,IAAD,OACZC,EAAO,SAAPA,IACA,EAAKD,cAGT,EAAKE,SAAS,CAACX,OAAQY,KAAKC,IAAI,EAAKL,MAAMR,OAAS,GAAI,KAEpD,EAAKQ,MAAMR,OAAS,KACtBc,IAAIJ,KAGRvB,EAAYG,oBACV,SAAAQ,GACM,EAAKW,cAGT,EAAKE,SAAS,CACZd,OAAQ,CACNkB,IAAKjB,EAASkB,OAAOC,SACrBC,IAAKpB,EAASkB,OAAOG,WAEvBpB,QAAQ,gCAGVe,IAAIJ,OAEN,SAAAU,GACM,EAAKX,aAGT,EAAKE,SAAS,CACZd,OAAQ,CACNkB,IAAK,GACLG,IAAK,KAEPnB,QAAQ,0CAAD,OAA4CqB,EAA5C,a,6CAObC,KAAKZ,aAAc,I,+BAInB,OACE,kBAAChB,EAAD,CACE6B,iBACE,yBAAKC,UAAU,kDAEjBC,WAAY,yBAAKD,UAAU,6BAC3B1B,OAAQwB,KAAKb,MAAMX,OACnBE,QAASsB,KAAKb,MAAMT,QACpBC,OAAQqB,KAAKb,MAAMR,a,GA/DqByB,aCVjCC,UArBO,WACpB,OACE,oCACE,kBAACC,EAAA,EAAD,CACEC,MAAM,aACNC,OAAO,uEAGT,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,IACb,kBAACC,EAAA,EAAD,CACEN,MAAM,aACNO,UAAWC,EACXC,OCxBG","file":"static/js/121.1a3fd992.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport {Circle, GoogleMap, InfoWindow, withGoogleMap} from 'react-google-maps';\r\nimport canUseDOM from 'can-use-dom';\r\nimport raf from 'raf';\r\n\r\nconst geolocation =\r\n  canUseDOM && navigator.geolocation\r\n    ? navigator.geolocation\r\n    : {\r\n        getCurrentPosition(success, failure) {\r\n          failure(`Your browser doesn't support geolocation.`);\r\n        },\r\n      };\r\n\r\nconst GeolocationExampleGoogleMap = withGoogleMap(props => (\r\n  <GoogleMap defaultZoom={10} center={props.center}>\r\n    {props.center && (\r\n      <InfoWindow position={props.center}>\r\n        <div>{props.content}</div>\r\n      </InfoWindow>\r\n    )}\r\n    {props.center && (\r\n      <Circle\r\n        center={props.center}\r\n        radius={props.radius}\r\n        options={{\r\n          fillColor: 'red',\r\n          fillOpacity: 0.2,\r\n          strokeColor: 'red',\r\n          strokeOpacity: 1,\r\n          strokeWeight: 1,\r\n        }}\r\n      />\r\n    )}\r\n  </GoogleMap>\r\n));\r\n\r\n/*\r\n * https://developers.google.com/maps/documentation/javascript/examples/map-geolocation\r\n *\r\n * Add <script src=\"https://maps.googleapis.com/maps/api/js\"></script> to your HTML to provide google.maps reference\r\n */\r\nexport default class GeolocationExample extends Component {\r\n  state = {\r\n    center: null,\r\n    content: null,\r\n    radius: 6000,\r\n  };\r\n\r\n  isUnmounted = false;\r\n\r\n  componentDidMount() {\r\n    const tick = () => {\r\n      if (this.isUnmounted) {\r\n        return;\r\n      }\r\n      this.setState({radius: Math.max(this.state.radius - 20, 0)});\r\n\r\n      if (this.state.radius > 200) {\r\n        raf(tick);\r\n      }\r\n    };\r\n    geolocation.getCurrentPosition(\r\n      position => {\r\n        if (this.isUnmounted) {\r\n          return;\r\n        }\r\n        this.setState({\r\n          center: {\r\n            lat: position.coords.latitude,\r\n            lng: position.coords.longitude,\r\n          },\r\n          content: `Location found using HTML5.`,\r\n        });\r\n\r\n        raf(tick);\r\n      },\r\n      reason => {\r\n        if (this.isUnmounted) {\r\n          return;\r\n        }\r\n        this.setState({\r\n          center: {\r\n            lat: 60,\r\n            lng: 105,\r\n          },\r\n          content: `Error: The Geolocation service failed (${reason}).`,\r\n        });\r\n      },\r\n    );\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.isUnmounted = true;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <GeolocationExampleGoogleMap\r\n        containerElement={\r\n          <div className='cr-embed-responsive cr-embed-responsive-21by9' />\r\n        }\r\n        mapElement={<div className='cr-embed-responsive-item' />}\r\n        center={this.state.center}\r\n        content={this.state.content}\r\n        radius={this.state.radius}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport ComponentCard from '@crema/core/ComponentCard';\r\nimport ComponentHeader from '@crema/core/ComponentHeader';\r\nimport GridContainer from '@crema/core/GridContainer';\r\n\r\nimport GeoLocation from './Components/GeoLocation';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport SimpleMapSource from '!raw-loader!./Components/GeoLocation';\r\n\r\nconst GeoLocationEx = () => {\r\n  return (\r\n    <>\r\n      <ComponentHeader\r\n        title='Google Map'\r\n        refUrl='http://google-map-react.github.io/google-map-react/map/balderdash/'\r\n      />\r\n\r\n      <GridContainer>\r\n        <Grid item xs={12}>\r\n          <ComponentCard\r\n            title='Simple Map'\r\n            component={GeoLocation}\r\n            source={SimpleMapSource}\r\n          />\r\n        </Grid>\r\n      </GridContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GeoLocationEx;\r\n","export default \"import React, {Component} from 'react';\\r\\nimport {Circle, GoogleMap, InfoWindow, withGoogleMap} from 'react-google-maps';\\r\\nimport canUseDOM from 'can-use-dom';\\r\\nimport raf from 'raf';\\r\\n\\r\\nconst geolocation =\\r\\n  canUseDOM && navigator.geolocation\\r\\n    ? navigator.geolocation\\r\\n    : {\\r\\n        getCurrentPosition(success, failure) {\\r\\n          failure(`Your browser doesn't support geolocation.`);\\r\\n        },\\r\\n      };\\r\\n\\r\\nconst GeolocationExampleGoogleMap = withGoogleMap(props => (\\r\\n  <GoogleMap defaultZoom={10} center={props.center}>\\r\\n    {props.center && (\\r\\n      <InfoWindow position={props.center}>\\r\\n        <div>{props.content}</div>\\r\\n      </InfoWindow>\\r\\n    )}\\r\\n    {props.center && (\\r\\n      <Circle\\r\\n        center={props.center}\\r\\n        radius={props.radius}\\r\\n        options={{\\r\\n          fillColor: 'red',\\r\\n          fillOpacity: 0.2,\\r\\n          strokeColor: 'red',\\r\\n          strokeOpacity: 1,\\r\\n          strokeWeight: 1,\\r\\n        }}\\r\\n      />\\r\\n    )}\\r\\n  </GoogleMap>\\r\\n));\\r\\n\\r\\n/*\\r\\n * https://developers.google.com/maps/documentation/javascript/examples/map-geolocation\\r\\n *\\r\\n * Add <script src=\\\"https://maps.googleapis.com/maps/api/js\\\"></script> to your HTML to provide google.maps reference\\r\\n */\\r\\nexport default class GeolocationExample extends Component {\\r\\n  state = {\\r\\n    center: null,\\r\\n    content: null,\\r\\n    radius: 6000,\\r\\n  };\\r\\n\\r\\n  isUnmounted = false;\\r\\n\\r\\n  componentDidMount() {\\r\\n    const tick = () => {\\r\\n      if (this.isUnmounted) {\\r\\n        return;\\r\\n      }\\r\\n      this.setState({radius: Math.max(this.state.radius - 20, 0)});\\r\\n\\r\\n      if (this.state.radius > 200) {\\r\\n        raf(tick);\\r\\n      }\\r\\n    };\\r\\n    geolocation.getCurrentPosition(\\r\\n      position => {\\r\\n        if (this.isUnmounted) {\\r\\n          return;\\r\\n        }\\r\\n        this.setState({\\r\\n          center: {\\r\\n            lat: position.coords.latitude,\\r\\n            lng: position.coords.longitude,\\r\\n          },\\r\\n          content: `Location found using HTML5.`,\\r\\n        });\\r\\n\\r\\n        raf(tick);\\r\\n      },\\r\\n      reason => {\\r\\n        if (this.isUnmounted) {\\r\\n          return;\\r\\n        }\\r\\n        this.setState({\\r\\n          center: {\\r\\n            lat: 60,\\r\\n            lng: 105,\\r\\n          },\\r\\n          content: `Error: The Geolocation service failed (${reason}).`,\\r\\n        });\\r\\n      },\\r\\n    );\\r\\n  }\\r\\n\\r\\n  componentWillUnmount() {\\r\\n    this.isUnmounted = true;\\r\\n  }\\r\\n\\r\\n  render() {\\r\\n    return (\\r\\n      <GeolocationExampleGoogleMap\\r\\n        containerElement={\\r\\n          <div className='cr-embed-responsive cr-embed-responsive-21by9' />\\r\\n        }\\r\\n        mapElement={<div className='cr-embed-responsive-item' />}\\r\\n        center={this.state.center}\\r\\n        content={this.state.content}\\r\\n        radius={this.state.radius}\\r\\n      />\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\";"],"sourceRoot":""}